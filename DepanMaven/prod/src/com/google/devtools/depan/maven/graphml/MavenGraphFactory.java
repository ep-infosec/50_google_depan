/*
 * Copyright 2016 The Depan Project Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.devtools.depan.maven.graphml;

import com.google.devtools.depan.graph.api.Relation;
import com.google.devtools.depan.graphml.builder.GraphFactory;
import com.google.devtools.depan.graphml.builder.GraphMLLogger;
import com.google.devtools.depan.maven.MavenRelationContributor;
import com.google.devtools.depan.maven.graph.ArtifactElement;
import com.google.devtools.depan.maven.graph.MavenRelation;
import com.google.devtools.depan.model.GraphNode;


/**
 * Supports GraphML translation for Maven output files generated by the
 * {@code dependency:tree -DoutputType=graphml -DoutputFile=}<em>file</em>
 * mojo.
 * 
 * @author <a href="mailto:leeca@pnambic.com">Lee Carver</a>
 */
public class MavenGraphFactory implements GraphFactory {
  // Relation Labels
  private final static String COMPILE_EDGE = "compile";
  private final static String PROVIDED_EDGE = "provided";
  private static final String SYSTEM_EDGE = "system";

  private static final String[] ANALYSIS_PLUGINS = {
    MavenRelationContributor.ID
  };

  @Override
  public String[] getAnalysisPlugins() {
    return ANALYSIS_PLUGINS;
  }

  @Override
  public GraphNode buildNode(String info) {
    String[] parts = info.split(":");
    String groupId = parts[0];
    String artifactId = parts[1];
    String packaging = parts[2];
    String version = parts[3];

    if (parts.length == 4) {
      return ArtifactElement.buildReference(
          groupId, artifactId, version, packaging, null);
    }

    String classifer = parts[4];
    return ArtifactElement.buildReference(
        groupId, artifactId, version, packaging, getClassifier(classifer));
  }

  private String getClassifier(String classifierPart) {
    if (COMPILE_EDGE.equals(classifierPart)) {
      return null;
    }
    return classifierPart;
  }

  @Override
  public Relation buildRelation(String info) {
    if (COMPILE_EDGE.equals(info)) {
      return MavenRelation.COMPILE_SCOPE;
    }
    if (PROVIDED_EDGE.equals(info)) {
      return MavenRelation.PROVIDED_SCOPE;
    }
    if (SYSTEM_EDGE.equals(info)) {
      return MavenRelation.SYSTEM_SCOPE;
    }
    GraphMLLogger.LOG.warn(
        "Unable to translate EdgeLabel {} into a DepAn Relation", info);
    return null;
  }
}
